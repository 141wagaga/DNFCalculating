from PublicReference.base import *

class 忍者技能0(主动技能):
    名称 = '碎踝'
    所在等级 = 10
    等级上限 = 60
    基础等级 = 48
    基础 = 1483.415094
    成长 = 203.5849057
    CD = 7.0
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5


class 忍者技能1(主动技能):
    名称 = '火遁·豪火球之术'
    所在等级 = 15
    等级上限 = 60
    基础等级 = 46
    基础 = 1453.333333
    成长 = 164.6666667
    CD = 6.3
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5

#默认打满40hit
class 忍者技能2(主动技能):
    名称 = '忍法：幻影手里剑'
    所在等级 = 20
    等级上限 = 60
    基础等级 = 43
    基础 = 4564.3125
    成长 = 517.6875
    CD = 10.0
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5

class 忍者技能3(主动技能):
    名称 = '火遁·飓风煞'
    所在等级 = 25
    等级上限 = 60
    基础等级 = 41
    基础 = 2730.543478
    成长 = 308.4565217
    CD = 14.3
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5

class 忍者技能4(被动技能):
    名称 = '苦无精通'
    所在等级 = 25
    等级上限 = 20
    基础等级 = 10

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.23 + 0.01 * self.等级, 5)

    def 魔法攻击力倍率(self, 武器类型):
        return self.加成倍率(武器类型)


class 忍者技能5(被动技能):
    名称 = '烈焰印记'
    所在等级 = 25
    等级上限 = 20
    基础等级 = 10

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.3 + 0.01 * self.等级, 5)


class 忍者技能6(主动技能):
    名称 = '火遁·螺旋手里剑'
    所在等级 = 30
    等级上限 = 60
    基础等级 = 28
    基础 = 420.255814
    成长 = 320.744186
    CD = 10.0
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5

class 忍者技能7(主动技能):
    名称 = '忍法：替身术'
    所在等级 = 35
    等级上限 = 60
    基础等级 = 24
    基础 = 4622.4
    成长 = 876.6
    CD = 26.2
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5

class 忍者技能8(主动技能):
    名称 = '火遁·炎天道'
    所在等级 = 35
    等级上限 = 60
    基础等级 = 36
    基础 = 4170.238095
    成长 = 470.7619048
    CD = 15.1
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5
    是否有护石 = 1

    def 装备护石(self):
        self.倍率 *= 1.14838009


class 忍者技能9(主动技能):
    名称 = '忍法：残影术'
    所在等级 = 35
    等级上限 = 11
    基础等级 = 1
    是否有伤害 = 0
    关联技能 = ['碎踝', '火遁·豪火球之术', '忍法：幻影手里剑', '火遁·飓风煞', '火遁·螺旋手里剑', '忍法：替身术', '火遁·炎天道', '火遁·蟾蜍油炎弹', '火遁·炎舞天璇','火遁·冥炎业火阵','八岐大蛇',
            '火遁·风魔手里剑', '忍法：飞燕手里剑', '天照','火炎灼空：草雉剑']

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(0.98 + 0.02 * self.等级, 5)


class 忍者技能10(主动技能):
    名称 = '火遁·蟾蜍油炎弹'
    所在等级 = 40
    等级上限 = 60
    基础等级 = 33
    基础 = 5654.205128
    成长 = 638.7948718
    CD = 21.0
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5
    是否有护石 = 1

    def 装备护石(self):
        self.倍率 *= 1.213771969
        self.CD *= 0.88


class 忍者技能11(主动技能):
    名称 = '忍法：六道轮回'
    所在等级 = 40
    等级上限 = 11
    基础等级 = 1
    关联技能 = ['碎踝', '火遁·豪火球之术', '忍法：幻影手里剑', '火遁·飓风煞', '火遁·螺旋手里剑', '忍法：替身术', '火遁·炎天道','火遁·蟾蜍油炎弹','火遁·炎舞天璇','八岐大蛇','火遁·风魔手里剑','天照']
    CD = 31.5

    def 加成倍率(self, 武器类型):
            return 1.0


class 忍者技能12(主动技能):
    名称 = '火遁·炎舞天璇'
    所在等级 = 45
    等级上限 = 60
    基础等级 = 31
    基础 = 8627.432432
    成长 = 969.5675676
    CD = 33.6
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5
    是否有护石 = 1

    def 装备护石(self):
        self.倍率 *= 1.203188496
        self.CD *= 0.9


class 忍者技能13(被动技能):
    名称 = '暗炎残星'
    所在等级 = 45
    等级上限 = 20
    基础等级 = 1

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.09 + 0.01 * self.等级, 5)

class 忍者技能14(被动技能):
    名称 = '毕方之印'
    所在等级 = 48
    等级上限 = 40
    基础等级 = 20
    基础 = 784.5
    成长 = 32.5
    攻击次数 = 9
    基础2 = 3925.5
    成长2 = 161.5
    攻击次数2 = 1
    CD = 5.0
    CD倍率 = 1.0
    TP成长 = 0.0
    TP上限 = 0
    TP等级 = 0
    是否有伤害 = 1
    恢复 = 1.0
    倍率 = 1.0
    被动倍率 = 1.0
    基础释放次数 = 0
    演出时间 = 0
    是否有护石 = 0
    # 毕方之印被动相关
    def 属强加成(self):
        if self.等级 == 0:
            return 0
        else:
            return (30 + 2 * self.等级)

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return 1.0

    def 等效百分比(self, 武器类型):
        if self.等级 == 0:
            return 0
        else:
            return int((self.攻击次数 * (self.基础 + self.成长 * self.等级) * self.倍率))

    def 等效CD(self, 武器类型):
        # Will修改
        return round(self.CD  / self.恢复, 1)



class 忍者技能15(主动技能):
    名称 = '火遁·冥炎业火阵'
    所在等级 = 50
    等级上限 = 40
    基础等级 = 12
    基础 = 28915.7
    成长 = 8736.475
    CD = 152.3

# 地面释放
class 忍者技能16(主动技能):
    名称 = '忍法：飞燕手里剑'
    所在等级 = 60
    等级上限 = 40
    基础等级 = 23
    基础 = 15090.45833
    成长 = 1694.541667
    CD = 31.5
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5
    是否有护石 = 1

    def 装备护石(self):
        self.倍率 *= 1.07


class 忍者技能17(主动技能):
    名称 = '八岐大蛇'
    所在等级 = 70
    等级上限 = 40
    基础等级 = 16
    基础 = 28161.75
    成长 = 3027.25
    CD = 36.1

class 忍者技能18(主动技能):
    名称 = '八尺琼勾玉'
    所在等级 = 70
    等级上限 = 1
    基础等级 = 1
    基础 = 0
    成长 = 2410
    CD = 1.5
    def 等效百分比(self, 武器类型):
        if self.等级 == 0:
            return 0
        else:
            return int((self.攻击次数 * (self.基础 + self.成长 * self.等级) * self.倍率))

    def 等效CD(self, 武器类型):
        # Will修改
        return round(self.CD  / self.恢复, 1)

    def 等效百分比(self, 武器类型):
        if self.等级 == 0:
            return 0
        else:
            return int((self.攻击次数 * (self.基础 + self.成长 * self.等级) * self.倍率))

    def 等效CD(self, 武器类型):
        # Will修改
        return round(self.CD  / self.恢复, 1)

class 忍者技能19(被动技能):
    名称 = '八咫镜'
    所在等级 = 75
    等级上限 = 40
    基础等级 = 11

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.08 + 0.02 * self.等级, 5)


class 忍者技能20(主动技能):
    名称 = '火遁·风魔手里剑'
    所在等级 = 75
    等级上限 = 40
    基础等级 = 18
    基础 = 14957.36842
    成长 = 1689.631579
    CD = 42.0
    TP成长 = 0.10
    TP基础 = 5
    TP上限 = 5
    是否有护石 = 1

    def 装备护石(self):
        self.倍率 *= 1.169747102


class 忍者技能21(主动技能):
    名称 = '天照'
    所在等级 = 80
    等级上限 = 40
    基础等级 = 13
    基础 = 25466.5
    成长 = 2875.5
    CD = 42.8

class 忍者技能22(主动技能):
    名称 = '开二觉平x'
    所在等级 = 85
    等级上限 = 40
    基础等级 = 5
    #斩击
    基础 = 833
    成长 = 39
    攻击次数 = 4
    #爆炸
    基础2 = 225
    成长2 = 15
    攻击次数2 = 3
    #火焰
    基础3 = 260
    成长3 = 23
    攻击次数3 = 4
    CD = 1.0
    
    def 等效百分比(self, 武器类型):
        if self.等级 == 0:
            return 0
        else:
            return int((self.攻击次数 * (self.基础 + self.成长 * self.等级) * self.倍率))

    def 等效CD(self, 武器类型):
        # Will修改
        return round(self.CD  / self.恢复, 1)


class 忍者技能23(主动技能):
    名称 = '火炎灼空：草雉剑'
    所在等级 = 85
    等级上限 = 40
    基础等级 = 5
    基础 = 11971.5
    成长 = 22106.5
    CD = 189.0


class 忍者技能24(被动技能):
    名称 = '卓越之力'
    所在等级 = 95
    等级上限 = 40
    基础等级 = 4

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.18 + 0.02 * self.等级, 5)


class 忍者技能25(被动技能):
    名称 = '超卓之心'
    所在等级 = 95
    等级上限 = 11
    基础等级 = 1

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.045 + 0.005 * self.等级, 5)


class 忍者技能26(被动技能):
    名称 = '觉醒之抉择'
    所在等级 = 100
    等级上限 = 40
    基础等级 = 2
    关联技能 = ['无']

    def 加成倍率(self, 武器类型):
        if self.等级 == 0:
            return 1.0
        else:
            return round(1.10 + 0.05 * self.等级, 5)


忍者技能列表 = []
i = 0
while i >= 0:
    try:
        exec('忍者技能列表.append(忍者技能' + str(i) + '())')
        i += 1
    except:
        i = -1

忍者技能序号 = dict()
for i in range(len(忍者技能列表)):
    忍者技能序号[忍者技能列表[i].名称] = i

忍者一觉序号 = 0
忍者二觉序号 = 0
忍者三觉序号 = 0
for i in 忍者技能列表:
    if i.所在等级 == 50:
        忍者一觉序号 = 忍者技能序号[i.名称]
    if i.所在等级 == 85:
        忍者二觉序号 = 忍者技能序号[i.名称]
    if i.所在等级 == 100:
        忍者三觉序号 = 忍者技能序号[i.名称]

忍者护石选项 = ['无']
for i in 忍者技能列表:
    if i.是否有伤害 == 1 and i.是否有护石 == 1:
        忍者护石选项.append(i.名称)

忍者符文选项 = ['无']
for i in 忍者技能列表:
    if i.所在等级 >= 20 and i.所在等级 <= 80 and i.所在等级 != 50 and i.是否有伤害 == 1 and i.名称 != '爆裂弹':
        忍者符文选项.append(i.名称)


class 忍者角色属性(角色属性):
    职业名称 = '忍者'

    武器选项 = ['苦无']

    # '物理百分比','魔法百分比','物理固伤','魔法固伤'
    伤害类型选择 = ['魔法百分比']

    # 默认
    伤害类型 = '魔法百分比'
    防具类型 = '布甲'
    防具精通属性 = ['智力', '力量']

    主BUFF = 2.04

    # 基础属性(含唤醒)
    基础力量 = 884.0
    基础智力 = 968.0

    # 适用系统奶加成
    力量 = 基础力量
    智力 = 基础智力

    # 人物基础 + 唤醒
    物理攻击力 = 65.0
    魔法攻击力 = 65.0
    独立攻击力 = 1045.0
    火属性强化 = 13
    冰属性强化 = 13
    光属性强化 = 13
    暗属性强化 = 13
    远古记忆 = 0

    六道绑定技能 = []

    def __init__(self):
        self.技能栏 = deepcopy(忍者技能列表)
        self.技能序号 = deepcopy(忍者技能序号)

    def 伤害指数计算(self):
        self.火属性强化 += self.技能栏[self.技能序号['毕方之印']].属强加成()
        super().伤害指数计算()

    def 火属性强化加成(self):
        火属性强化值 = 0
        for i in self.技能栏:
            if i.名称 != '毕方之印':
                火属性强化值 += 0
            else:
                火属性强化值 += i.属强加成()
        return (火属性强化值)

    def 伤害计算(self, x = 0):
        
        self.所有属性强化(self.进图属强)
        # Will添加
        self.CD倍率计算()
        self.加算冷却计算()

        self.被动倍率计算()
        self.伤害指数计算()

        技能释放次数=[]
        技能单次伤害=[]
        技能总伤害=[]
    
        #技能单次伤害计算
        for i in self.技能栏:
            if i.是否有伤害==1:
                技能单次伤害.append(i.等效百分比(self.武器类型)*self.伤害指数*i.被动倍率)
            else:
                技能单次伤害.append(0)
      
        #技能释放次数计算
        for i in self.技能栏:
            if i.是否有伤害==1:
                if self.次数输入[self.技能序号[i.名称]] =='/CD':
                    技能释放次数.append(int((self.时间输入 - i.演出时间)/i.等效CD(self.武器类型) + 1 +i.基础释放次数))
                else:
                    技能释放次数.append(int(self.次数输入[self.技能序号[i.名称]]))
            else:
                技能释放次数.append(0)
    
        #单技能伤害合计

        for i in self.技能栏:
            if i.是否有伤害==1 and 技能释放次数[self.技能序号[i.名称]] != 0:
                技能总伤害.append(技能单次伤害[self.技能序号[i.名称]]*技能释放次数[self.技能序号[i.名称]]*(1+self.白兔子技能*0.20+self.年宠技能*0.10*self.宠物次数[self.技能序号[i.名称]]/技能释放次数[self.技能序号[i.名称]]+self.斗神之吼秘药*0.12))
            else:
                技能总伤害.append(0)

        #六道伤害计算
        if self.技能栏[self.技能序号['忍法：六道轮回']].等级 != 0:
           for i in self.六道绑定技能:
               if 技能释放次数[self.技能序号[i]] != 0:
                   技能总伤害[self.技能序号[i]] += 0.8 * 技能单次伤害[self.技能序号[i]] * 技能释放次数[self.技能序号['忍法：六道轮回']] * (1+self.白兔子技能*0.20+self.年宠技能*0.10*self.宠物次数[self.技能序号['忍法：六道轮回']]/技能释放次数[self.技能序号['忍法：六道轮回']]+self.斗神之吼秘药*0.12)

        总伤害=0
        for i in self.技能栏:
            总伤害+=技能总伤害[self.技能序号[i.名称]]
        
        if x==0:
            return 总伤害
    
        if x==1:
            详细数据=[]
            for i in range(0,len(self.技能栏)):
                详细数据.append(技能释放次数[i])
                详细数据.append(技能总伤害[i])
                if 技能释放次数[i] != 0 :
                    详细数据.append(技能总伤害[i]/技能释放次数[i])
                else:
                    详细数据.append(0)
                if 总伤害 != 0:
                    详细数据.append(技能总伤害[i]/总伤害*100)
                else:
                    详细数据.append(0)
            return 详细数据




class 忍者(角色窗口):
    def 窗口属性输入(self):
        self.初始属性 = 忍者角色属性()
        self.角色属性A = 忍者角色属性()
        self.角色属性B = 忍者角色属性()
        self.一觉序号 = 忍者一觉序号
        self.二觉序号 = 忍者二觉序号
        self.三觉序号 = 忍者三觉序号
        self.护石选项 = deepcopy(忍者护石选项)
        self.符文选项 = deepcopy(忍者符文选项)

    def 界面(self):
        super().界面()

        self.六道绑定按钮 = []
        self.可绑定技能 = ['碎踝', '火遁·豪火球之术', '忍法：幻影手里剑', '火遁·飓风煞', '火遁·螺旋手里剑', '忍法：替身术', '火遁·炎天道', '火遁·蟾蜍油炎弹', '火遁·炎舞天璇', '八岐大蛇','火遁·风魔手里剑', '天照']
        默认勾选 = [ '忍法：替身术',  '火遁·蟾蜍油炎弹', '火遁·炎舞天璇', '八岐大蛇','火遁·风魔手里剑', '天照']

        水平间隔 = 145
        竖直间隔 = 40

        for i in range(len(self.可绑定技能)):
            self.六道绑定按钮.append(QCheckBox(self.可绑定技能[i], self.main_frame2))
            self.六道绑定按钮[i].resize(120, 20)
            self.六道绑定按钮[i].move(315 + (i % 3) * 水平间隔, 450 + int(i / 3) * 竖直间隔)
            self.六道绑定按钮[i].setStyleSheet(复选框样式)
            if self.可绑定技能[i] in 默认勾选:
                self.六道绑定按钮[i].setChecked(True)

    def 站街计算(self, 装备名称, 套装名称):
        C = deepcopy(self.角色属性A)
        C.技能栏 = deepcopy(self.角色属性A.技能栏)
        C.穿戴装备(装备名称, 套装名称)
        for i in C.装备栏:
            装备列表[装备序号[i]].城镇属性(C)
        for i in C.套装栏:
            套装列表[套装序号[i]].城镇属性(C)
        C.装备基础()

        C.火属性强化 += C.火属性强化加成()

        return C

    def 输入属性(self, 属性, x = 0):
        super().输入属性(属性)
        temp = []
        for i in range(len(self.可绑定技能)):
            if self.六道绑定按钮[i].isChecked():
                temp.append(self.可绑定技能[i])
        属性.六道绑定技能 = deepcopy(temp)
    
    

